from os import system 
from math import *
import time
import msvcrt as ms
import random
instruction1 = """"

   _____ _                     _           _                   _   _                         _____ _    _ _____ ______ _______           _____  
  / ____| |                   (_)         | |                 | | (_)                       / ____| |  | |_   _|  ____|__   __|    _    |  __ \ 
 | (___ | |__   _____      __  _ _ __  ___| |_ _ __ _   _  ___| |_ _  ___  _ __    ______  | (___ | |__| | | | | |__     | |     _| |_  | |__) |
  \___ \| '_ \ / _ \ \ /\ / / | | '_ \/ __| __| '__| | | |/ __| __| |/ _ \| '_ \  |______|  \___ \|  __  | | | |  __|    | |    |_   _| |  ___/ 
  ____) | | | | (_) \ V  V /  | | | | \__ \ |_| |  | |_| | (__| |_| | (_) | | | |           ____) | |  | |_| |_| |       | |      |_|   | |     
 |_____/|_| |_|\___/ \_/\_/   |_|_| |_|___/\__|_|   \__,_|\___|\__|_|\___/|_| |_|          |_____/|_|  |_|_____|_|       |_|            |_|     
                                                                                                                                                
                                                                                                                                                
"""
instruction2=r'''  ___                    _        _   _                                   _                                                                                                
 |_ _|_ __     _ __ ___ | |_ __ _| |_(_) ___  _ __    _ __ ___   ___   __| | ___ _                                                                                         
  | || '_ \   | '__/ _ \| __/ _` | __| |/ _ \| '_ \  | '_ ` _ \ / _ \ / _` |/ _ (_)                                                                                        
  | || | | |  | | | (_) | || (_| | |_| | (_) | | | | | | | | | | (_) | (_| |  __/_                                                                                         
 |___|_| |_|__|_| _\___/_\__\__,_|\__|_|\___/|_| |_| |_| |_| |_|\___/ \__,_|\___(_)                                                                                        
 \ \      / / \  / ___||  _ \           _ __ ___ | |_ __ _| |_ ___    ___ _   _| |__   ___                                                                                 
  \ \ /\ / / _ \ \___ \| | | |  _____  | '__/ _ \| __/ _` | __/ _ \  / __| | | | '_ \ / _ \                                                                                
   \ V  V / ___ \ ___) | |_| | |_____| | | | (_) | || (_| | ||  __/ | (__| |_| | |_) |  __/                                                                                
    \_/\_/_/   \_\____/|____/          |_|  \___/ \__\__,_|\__\___|  \___|\__,_|_.__/ \___|                                                                                
  _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____ _____                                                                                      
 |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|                                                                                     
 |_ _|_ __    _ __ ___   _____   _(_)_ __   __ _   _ __ ___   ___   __| | ___ _                                                                                            
  | || '_ \  | '_ ` _ \ / _ \ \ / / | '_ \ / _` | | '_ ` _ \ / _ \ / _` |/ _ (_)                                                                                           
  | || | | | | | | | | | (_) \ V /| | | | | (_| | | | | | | | (_) | (_| |  __/_                                                                                            
 |___|_| |_| |_| |_| |_|\___/ \_/ |_|_| |_|\__, | |_| |_| |_|\___/ \__,_|\___(_)                                                                                           
   __           _                       __ |___/           _          _            _              _                                                                        
  / _|         | |_ _   _ _ __ _ __    / _|_ __ ___  _ __ | |_    ___| | ___   ___| | ____      _(_)___  ___                                                               
 | |_   _____  | __| | | | '__| '_ \  | |_| '__/ _ \| '_ \| __|  / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                              
 |  _| |_____| | |_| |_| | |  | | | | |  _| | | (_) | | | | |_  | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                              
 |_|            \__|\__,_|_|  |_| |_| |_| |_|  \___/|_| |_|\__|  \___|_|\___/ \___|_|\_\_ \_/\_/ |_|___/\___|                                                              
  _   _          | |_ _   _ _ __ _ __    _   _ _ __     ___| | ___   ___| | ____      _(_)___  ___                                                                         
 | | | |  _____  | __| | | | '__| '_ \  | | | | '_ \   / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                                        
 | |_| | |_____| | |_| |_| | |  | | | | | |_| | |_) | | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                                        
  \__,_|         _\__|\__,_|_|  |_| |_|  \__,_| .__/ _ \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|                                                                        
  _ __          | |_ _   _ _ __ _ __    _ __(_)_|_ _| |__ | |_    ___| | ___   ___| | ____      _(_)___  ___                                                               
 | '__|  _____  | __| | | | '__| '_ \  | '__| |/ _` | '_ \| __|  / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                              
 | |    |_____| | |_| |_| | |  | | | | | |  | | (_| | | | | |_  | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                              
 |_|             \__|\__,_|_|  |_| |_| |_|  |_|\__, |_| |_|\__|  \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|                                                              
  _           _                      _       __|___/       _            _              _                                                                                   
 | |         | |_ _   _ _ __ _ __   | | ___ / _| |_    ___| | ___   ___| | ____      _(_)___  ___                                                                          
 | |  _____  | __| | | | '__| '_ \  | |/ _ \ |_| __|  / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                                         
 | | |_____| | |_| |_| | |  | | | | | |  __/  _| |_  | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                                         
 |_|          \__|\__,_|_|  |_| |_| |_|\___|_|  \__|  \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|_                                                                        
 | |__           | |_ _   _ _ __ _ __   | |__   __ _  ___| | __   ___| | ___   ___| | ____      _(_)___  ___                                                               
 | '_ \   _____  | __| | | | '__| '_ \  | '_ \ / _` |/ __| |/ /  / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                              
 | |_) | |_____| | |_| |_| | |  | | | | | |_) | (_| | (__|   <  | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                              
 |_.__/           \__|\__,_|_|  |_| |_| |_.__/ \__,_|\___|_|\_\  \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|                                                              
   __| |         | |_ _   _ _ __ _ __     __| | _____      ___ __     ___| | ___   ___| | ____      _(_)___  ___                                                           
  / _` |  _____  | __| | | | '__| '_ \   / _` |/ _ \ \ /\ / / '_ \   / __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \                                                          
 | (_| | |_____| | |_| |_| | |  | | | | | (_| | (_) \ V  V /| | | | | (__| | (_) | (__|   <  \ V  V /| \__ \  __/                                                          
  \__,_|          \__|\__,_|_|  |_| |_|  \__,_|\___/ \_/\_/ |_| |_|  \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|                                                          
  _           _     _ _               ____  _   _ ___ _____ _____            _     _ _                                                                                     
 | |__   ___ | | __| (_)_ __   __ _  / ___|| | | |_ _|  ___|_   _| __      _| |__ (_) | ___   _ __  _ __ ___  ___ ___                                                      
 | '_ \ / _ \| |/ _` | | '_ \ / _` | \___ \| |_| || || |_    | |   \ \ /\ / / '_ \| | |/ _ \ | '_ \| '__/ _ \/ __/ __|                                                     
 | | | | (_) | | (_| | | | | | (_| |  ___) |  _  || ||  _|   | |    \ V  V /| | | | | |  __/ | |_) | | |  __/\__ \__ \                                                     
 |_| |_|\___/|_|\__,_|_|_| |_|\__, | |____/|_|_|_|___|_|     |_|     \_/\_/ |_| |_|_|_|\___| | .__/|_|  \___||___/___/ 

 | |__  _   _| |_| |_ ___  _ _|___/_      _(_) | | | |_ _   _ _ __ _ __    / _| __ _  ___ ___|_|                                                                           
 | '_ \| | | | __| __/ _ \| '_ \  \ \ /\ / / | | | | __| | | | '__| '_ \  | |_ / _` |/ __/ _ \                                                                             
 | |_) | |_| | |_| || (_) | | | |  \ V  V /| | | | | |_| |_| | |  | | | | |  _| (_| | (_|  __/                                                                             
 |_.__/ \__,_|\__|\__\___/|_| |_|   \_/\_/ |_|_|_|  \__|\__,_|_|  |_|_|_| |_|  \__,_|\___\___|  
                 _   _                                                              
   ___ ___  _   _ _ __ | |_ ___ _ __ ___| | ___   ___| | ____      _(_)___  ___    __| (_)_ __ ___  ___| |_(_) ___  _ __                                                   
  / __/ _ \| | | | '_ \| __/ _ \ '__/ __| |/ _ \ / __| |/ /\ \ /\ / / / __|/ _ \  / _` | | '__/ _ \/ __| __| |/ _ \| '_ \                                                  
 | (_| (_) | |_| | | | | ||  __/ | | (__| | (_) | (__|   <  \ V  V /| \__ \  __/ | (_| | | | |  __/ (__| |_| | (_) | | | |                                                 
  \___\___/ \__,_|_| |_|\__\___|_|  \___|_|\___/ \___|_|\_\  \_/\_/ |_|___/\___|  \__,_|_|_|  \___|\___|\__|_|\___/|_| |_|
     _
    / / | |_ ___    ___  ___ _ __ __ _ _ __ ___ | |__ | | ___    ___ _   _| |__   ___                                                                                      
   / /  | __/ _ \  / __|/ __| '__/ _` | '_ ` _ \| '_ \| |/ _ \  / __| | | | '_ \ / _ \                                                                                     
  / /   | || (_) | \__ \ (__| | | (_| | | | | | | |_) | |  __/ | (__| |_| | |_) |  __/                                                                                     
 /_/     \__\___/  |___/\___|_|  \__,_|_| |_| |_|_.__/|_|\___|_ \___|\__,_|_.__/ \___|
         _                                           _                                                          _
 __/\__ | |_ ___    _____      _(_) |_ ___| |__   | |__   ___| |___      _____  ___ _ __    _ __ ___   ___   __| | ___  ___                                                
 \    / | __/ _ \  / __\ \ /\ / / | __/ __| '_ \  | '_ \ / _ \ __\ \ /\ / / _ \/ _ \ '_ \  | '_ ` _ \ / _ \ / _` |/ _ \/ __|                                               
 /_  _\ | || (_) | \__ \\ V  V /| | || (__| | | | | |_) |  __/ |_ \ V  V /  __/  __/ | | | | | | | | | (_) | (_| |  __/\__ \                                               
   \/    \__\___/  |___/_\_/\_/ |_|\__\___|_| |_| |_.__/ \___|\__| \_/\_/ \___|\___|_| |_| |_| |_| |_|\___/ \__,_|\___||___/
  ____  _   _ ___ _____ _____            ___    _               _                  _                               _   _
 / ___|| | | |_ _|  ___|_   _|    _     / _ \  | |_ ___     ___| | ___  ___  ___  (_)_ __  ___| |_ _ __ _   _  ___| |_(_) ___  _ __                                        
 \___ \| |_| || || |_    | |    _| |_  | | | | | __/ _ \   / __| |/ _ \/ __|/ _ \ | | '_ \/ __| __| '__| | | |/ __| __| |/ _ \| '_ \                                       
  ___) |  _  || ||  _|   | |   |_   _| | |_| | | || (_) | | (__| | (_) \__ \  __/ | | | | \__ \ |_| |  | |_| | (__| |_| | (_) | | | |                                      
 |____/|_| |_|___|_|     |_|   _ |_|    \__\_\ _\__\___/   \___|_|\___/|___/\___| |_|_| |_|___/\__|_|   \__,_|\___|\__|_|\___/|_| |_|





              _   _                         
  _ __   ___ | |_(_) ___ ___  | |_| |__   __ _| |_   / _| __ _  ___ ___  ___    __| | ___    _ __   ___ | |_    ___| |__   __ _ _ __   __ _  ___                           
 | '_ \ / _ \| __| |/ __/ _ \ | __| '_ \ / _` | __| | |_ / _` |/ __/ _ \/ __|  / _` |/ _ \  | '_ \ / _ \| __|  / __| '_ \ / _` | '_ \ / _` |/ _ \                          
 | | | | (_) | |_| | (_|  __/ | |_| | | | (_| | |_  |  _| (_| | (_|  __/\__ \ | (_| | (_) | | | | | (_) | |_  | (__| | | | (_| | | | | (_| |  __/                          
 |_| |_|\___/ \__|_|\___\___|  \__|_| |_|\__,_|\__| |_|  \__,_|\___\___||___/  \__,_|\___/  |_| |_|\___/ \__|  \___|_| |_|\__,_|_| |_|\__, |\___|                          
  _   _          _                                                   _     _ _        _   _                            _        _     |___/                                
 | |_| |__   ___(_)_ __   _ __   __ _ _ __ ___   ___  ___  __      _| |__ (_) | ___  | |_| |__   ___ _   _   _ __ ___ | |_ __ _| |_ ___| |                                 
 | __| '_ \ / _ \ | '__| | '_ \ / _` | '_ ` _ \ / _ \/ __| \ \ /\ / / '_ \| | |/ _ \ | __| '_ \ / _ \ | | | | '__/ _ \| __/ _` | __/ _ \ |                                 
 | |_| | | |  __/ | |    | | | | (_| | | | | | |  __/\__ \  \ V  V /| | | | | |  __/ | |_| | | |  __/ |_| | | | | (_) | || (_| | ||  __/_|                                 
  \__|_| |_|\___|_|_|    |_| |_|\__,_|_| |_| |_|\___||___/   \_/\_/ |_| |_|_|_|\___|  \__|_| |_|\___|\__, | |_|  \___/ \__\__,_|\__\___(_)                                 
                                                        _                _      _                    |___/ _                         _                                     
  _   _  ___  _   _    ___ __ _ _ __    _ __ ___   __ _| | _____   _ __ (_) ___| |_ _   _ _ __ ___  | |__ (_) __ _  __ _  ___ _ __  | |_ ___    ___  ___  ___              
 | | | |/ _ \| | | |  / __/ _` | '_ \  | '_ ` _ \ / _` | |/ / _ \ | '_ \| |/ __| __| | | | '__/ _ \ | '_ \| |/ _` |/ _` |/ _ \ '__| | __/ _ \  / __|/ _ \/ _ \             
 | |_| | (_) | |_| | | (_| (_| | | | | | | | | | | (_| |   <  __/ | |_) | | (__| |_| |_| | | |  __/ | |_) | | (_| | (_| |  __/ |    | || (_) | \__ \  __/  __/             
  \__, |\___/ \__,_|  \___\__,_|_| |_| |_| |_| |_|\__,_|_|\_\___| | .__/|_|\___|\__|\__,_|_|  \___| |_.__/|_|\__, |\__, |\___|_|     \__\___/  |___/\___|\___|             
  |___/                  __                  _                    |_|               _    __   __             |___/ |___/                            _       _           _  
 | |__   _____      __  / _| __ _  ___ ___  (_)___   _ __   __ _ _ __ ___   ___  __| |  / /  / _| __ _  ___ ___  ___    __ _ _ __ ___   _ __   __ _(_)_ __ | |_ ___  __| | 
 | '_ \ / _ \ \ /\ / / | |_ / _` |/ __/ _ \ | / __| | '_ \ / _` | '_ ` _ \ / _ \/ _` | | |  | |_ / _` |/ __/ _ \/ __|  / _` | '__/ _ \ | '_ \ / _` | | '_ \| __/ _ \/ _` | 
 | | | | (_) \ V  V /  |  _| (_| | (_|  __/ | \__ \ | | | | (_| | | | | | |  __/ (_| | | |  |  _| (_| | (_|  __/\__ \ | (_| | | |  __/ | |_) | (_| | | | | | ||  __/ (_| | 
 |_| |_|\___/ \_/\_/   |_|  \__,_|\___\___| |_|___/_|_| |_|\__,_|_| |_| |_|\___|\__,_|_| |  |_|  \__,_|\___\___||___/  \__,_|_|  \___| | .__/ \__,_|_|_| |_|\__\___|\__,_| 
  _   _ ___(_)_ __   __ _    ___ ___ _ __| |_ __ _(_)_ __   | | ___| |_| |_ ___ _ __  \ \_\                                            |_|                                 
 | | | / __| | '_ \ / _` |  / __/ _ \ '__| __/ _` | | '_ \  | |/ _ \ __| __/ _ \ '__|  | |                                                                                 
 | |_| \__ \ | | | | (_| | | (_|  __/ |  | || (_| | | | | | | |  __/ |_| ||  __/ |     | |                                                                                 
  \__,_|___/_|_| |_|\__, |  \___\___|_|   \__\__,_|_|_| |_| |_|\___|\__|\__\___|_|     | |                                                                                 
                    |___/                                                             /_/                                                                                  '''

#height = input('Введите желаемое разрешение(высота выводимой области в пикселях(символах))')
h=int(110)
w=round(h*16/9)
#msht = int(input('Введите масштаб (длина единичного отрезка в пикселях)'))
h_msht=18
w_msht=18
zz = [round(h/2),round(w/2)]
row = list(' '*w)
plane = []
CUBES_COLORS = {
    'f':[['w','w','w'],['w','w','w'],['w','w','w']],
    'b':[['y','y','y'],['y','y','y'],['y','y','y']],
    'u':[['b','b','b'],['b','b','b'],['b','b','b']],
    'd':[['g','g','g'],['g','g','g'],['g','g','g']],
    'l':[['o','o','o'],['o','o','o'],['o','o','o']],
    'r':[['r','r','r'],['r','r','r'],['r','r','r']]
}
cubes_colors = { 
    'r':[['r','r','r'],['r','r','r'],['r','r','r']],
    'u':[['b','b','b'],['b','b','b'],['b','b','b']],
    'l':[['o','o','o'],['o','o','o'],['o','o','o']],    
    'd':[['g','g','g'],['g','g','g'],['g','g','g']],
    'b':[['y','y','y'],['y','y','y'],['y','y','y']],
    'f':[['w','w','w'],['w','w','w'],['w','w','w']]
}

colors = {'w':'\033[47m\033[30m',
          'y':'\033[43m\033[30m',
          'b':'\033[44m\033[30m',
          'g':'\033[48;5;46m\033[30m',
          'r':'\033[41m\033[30m',
          'o':'\033[48;5;208m\033[30m',
          'c':'\033[0m'}
for i in range(h+1):
    plane.append(list(row))

system(f'mode con: cols={w} lines={h+27}')
turning_angle=5*pi/180
sinus = sin(turning_angle)
cosinus = cos(turning_angle)

def u(c=cubes_colors,dir=0):
    """
    turning the upper side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir == 1:
        
        c['f'][0][2],c['l'][0][0],c['b'][0][0],c['r'][0][2]=c['l'][0][0],c['b'][0][0],c['r'][0][2],c['f'][0][2]
        c['f'][0][0],c['l'][0][2],c['b'][0][2],c['r'][0][0]=c['l'][0][2],c['b'][0][2],c['r'][0][0],c['f'][0][0]
        c['f'][0][1],c['l'][0][1],c['b'][0][1],c['r'][0][1]=c['l'][0][1],c['b'][0][1],c['r'][0][1],c['f'][0][1]
        

        c['u'][0][1],c['u'][1][2],c['u'][2][1],c['u'][1][0]=c['u'][1][2],c['u'][2][1],c['u'][1][0],c['u'][0][1]
        c['u'][0][0],c['u'][0][2],c['u'][2][2],c['u'][2][0]=c['u'][0][2],c['u'][2][2],c['u'][2][0],c['u'][0][0]
    elif dir == 0:
        
        c['l'][0][0],c['b'][0][0],c['r'][0][2],c['f'][0][2]=c['f'][0][2],c['l'][0][0],c['b'][0][0],c['r'][0][2]
        c['l'][0][2],c['b'][0][2],c['r'][0][0],c['f'][0][0]=c['f'][0][0],c['l'][0][2],c['b'][0][2],c['r'][0][0]
        c['l'][0][1],c['b'][0][1],c['r'][0][1],c['f'][0][1]=c['f'][0][1],c['l'][0][1],c['b'][0][1],c['r'][0][1]

        c['u'][1][2],c['u'][2][1],c['u'][1][0],c['u'][0][1]=c['u'][0][1],c['u'][1][2],c['u'][2][1],c['u'][1][0]
        c['u'][0][2],c['u'][2][2],c['u'][2][0],c['u'][0][0]=c['u'][0][0],c['u'][0][2],c['u'][2][2],c['u'][2][0]

    else:
        return 'Fatal Error'  
    return c
def d(c=cubes_colors,dir=0):
    """
    turning the down side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir==1:
        c['f'][2][0],c['r'][2][0],c['b'][2][2],c['l'][2][2]=c['r'][2][0],c['b'][2][2],c['l'][2][2],c['f'][2][0]
        c['f'][2][2],c['r'][2][2],c['b'][2][0],c['l'][2][0]=c['r'][2][2],c['b'][2][0],c['l'][2][0],c['f'][2][2]
        c['f'][2][1],c['r'][2][1],c['b'][2][1],c['l'][2][1]=c['r'][2][1],c['b'][2][1],c['l'][2][1],c['f'][2][1]

        c['d'][1][2],c['d'][2][1],c['d'][1][0],c['d'][0][1]=c['d'][0][1],c['d'][1][2],c['d'][2][1],c['d'][1][0]
        c['d'][0][2],c['d'][2][2],c['d'][2][0],c['d'][0][0]=c['d'][0][0],c['d'][0][2],c['d'][2][2],c['d'][2][0]
        
    elif dir==0:
        c['r'][2][0],c['b'][2][2],c['l'][2][2],c['f'][2][0]=c['f'][2][0],c['r'][2][0],c['b'][2][2],c['l'][2][2]
        c['r'][2][2],c['b'][2][0],c['l'][2][0],c['f'][2][2]=c['f'][2][2],c['r'][2][2],c['b'][2][0],c['l'][2][0]
        c['r'][2][1],c['b'][2][1],c['l'][2][1],c['f'][2][1]=c['f'][2][1],c['r'][2][1],c['b'][2][1],c['l'][2][1]

        c['d'][0][1],c['d'][1][2],c['d'][2][1],c['d'][1][0]=c['d'][1][2],c['d'][2][1],c['d'][1][0],c['d'][0][1]
        c['d'][0][0],c['d'][0][2],c['d'][2][2],c['d'][2][0]=c['d'][0][2],c['d'][2][2],c['d'][2][0],c['d'][0][0]

    else:
        return 'Fatal Error'
    return c
def r(c=cubes_colors,dir=0):
    """
    turning the right side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir==1:

        c['f'][0][2],c['u'][0][2],c['b'][2][2],c['d'][2][2]=c['u'][0][2],c['b'][2][2],c['d'][2][2],c['f'][0][2]
        c['f'][2][2],c['u'][2][2],c['b'][0][2],c['d'][0][2]=c['u'][2][2],c['b'][0][2],c['d'][0][2],c['f'][2][2]
        c['f'][1][2],c['u'][1][2],c['b'][1][2],c['d'][1][2]=c['u'][1][2],c['b'][1][2],c['d'][1][2],c['f'][1][2]

        c['r'][0][1],c['r'][1][2],c['r'][2][1],c['r'][1][0]=c['r'][1][2],c['r'][2][1],c['r'][1][0],c['r'][0][1]
        c['r'][0][0],c['r'][0][2],c['r'][2][2],c['r'][2][0]=c['r'][0][2],c['r'][2][2],c['r'][2][0],c['r'][0][0]
        
    elif dir==0:

        c['u'][0][2],c['b'][2][2],c['d'][2][2],c['f'][0][2]=c['f'][0][2],c['u'][0][2],c['b'][2][2],c['d'][2][2]
        c['u'][2][2],c['b'][0][2],c['d'][0][2],c['f'][2][2]=c['f'][2][2],c['u'][2][2],c['b'][0][2],c['d'][0][2]
        c['u'][1][2],c['b'][1][2],c['d'][1][2],c['f'][1][2]=c['f'][1][2],c['u'][1][2],c['b'][1][2],c['d'][1][2]

        c['r'][1][2],c['r'][2][1],c['r'][1][0],c['r'][0][1]=c['r'][0][1],c['r'][1][2],c['r'][2][1],c['r'][1][0]
        c['r'][0][2],c['r'][2][2],c['r'][2][0],c['r'][0][0]=c['r'][0][0],c['r'][0][2],c['r'][2][2],c['r'][2][0]      
    else:
        return 'Fatal Error'
    return c
def l(c=cubes_colors,dir=0):
    """
    turning the left side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir==0:

        c['f'][0][0],c['u'][0][0],c['b'][2][0],c['d'][2][0]=c['u'][0][0],c['b'][2][0],c['d'][2][0],c['f'][0][0]
        c['f'][2][0],c['u'][2][0],c['b'][0][0],c['d'][0][0]=c['u'][2][0],c['b'][0][0],c['d'][0][0],c['f'][2][0]
        c['f'][1][0],c['u'][1][0],c['b'][1][0],c['d'][1][0]=c['u'][1][0],c['b'][1][0],c['d'][1][0],c['f'][1][0]

        c['l'][0][1],c['l'][1][2],c['l'][2][1],c['l'][1][0]=c['l'][1][2],c['l'][2][1],c['l'][1][0],c['l'][0][1]
        c['l'][0][0],c['l'][0][2],c['l'][2][2],c['l'][2][0]=c['l'][0][2],c['l'][2][2],c['l'][2][0],c['l'][0][0]
        
    elif dir==1:

        c['u'][0][0],c['b'][2][0],c['d'][2][0],c['f'][0][0]=c['f'][0][0],c['u'][0][0],c['b'][2][0],c['d'][2][0]
        c['u'][2][0],c['b'][0][0],c['d'][0][0],c['f'][2][0]=c['f'][2][0],c['u'][2][0],c['b'][0][0],c['d'][0][0]
        c['u'][1][0],c['b'][1][0],c['d'][1][0],c['f'][1][0]=c['f'][1][0],c['u'][1][0],c['b'][1][0],c['d'][1][0]

        c['l'][1][2],c['l'][2][1],c['l'][1][0],c['l'][0][1]=c['l'][0][1],c['l'][1][2],c['l'][2][1],c['l'][1][0]
        c['l'][0][2],c['l'][2][2],c['l'][2][0],c['l'][0][0]=c['l'][0][0],c['l'][0][2],c['l'][2][2],c['l'][2][0]  
    else:
        return "Fatal Error"
    return c
def f(c=cubes_colors,dir=0):
    """
    turning the front side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir==1:
        
        c['u'][2][0],c['r'][0][0],c['d'][2][2],c['l'][2][0]=c['r'][0][0],c['d'][2][2],c['l'][2][0],c['u'][2][0]
        c['u'][2][2],c['r'][2][0],c['d'][2][0],c['l'][0][0]=c['r'][2][0],c['d'][2][0],c['l'][0][0],c['u'][2][2]
        c['u'][2][1],c['r'][1][0],c['d'][2][1],c['l'][1][0]=c['r'][1][0],c['d'][2][1],c['l'][1][0],c['u'][2][1]

        c['f'][0][1],c['f'][1][2],c['f'][2][1],c['f'][1][0]=c['f'][1][2],c['f'][2][1],c['f'][1][0],c['f'][0][1]
        c['f'][0][0],c['f'][0][2],c['f'][2][2],c['f'][2][0]=c['f'][0][2],c['f'][2][2],c['f'][2][0],c['f'][0][0] 
        
    elif dir==0:

        c['r'][0][0],c['d'][2][2],c['l'][2][0],c['u'][2][0]=c['u'][2][0],c['r'][0][0],c['d'][2][2],c['l'][2][0]
        c['r'][2][0],c['d'][2][0],c['l'][0][0],c['u'][2][2]=c['u'][2][2],c['r'][2][0],c['d'][2][0],c['l'][0][0]
        c['r'][1][0],c['d'][2][1],c['l'][1][0],c['u'][2][1]=c['u'][2][1],c['r'][1][0],c['d'][2][1],c['l'][1][0]

        c['f'][1][2],c['f'][2][1],c['f'][1][0],c['f'][0][1]=c['f'][0][1],c['f'][1][2],c['f'][2][1],c['f'][1][0]
        c['f'][0][2],c['f'][2][2],c['f'][2][0],c['f'][0][0]=c['f'][0][0],c['f'][0][2],c['f'][2][2],c['f'][2][0]
    return c
def b(c=cubes_colors,dir=0):
    """
    turning the front side of the cube
    if dir== 0 - move clockwise direction
    if dir == 1 - move counterclockwise direction
    """
    
    if dir==1:

        c['u'][0][0],c['l'][2][2],c['d'][0][2],c['r'][0][2]=c['l'][2][2],c['d'][0][2],c['r'][0][2],c['u'][0][0]
        c['u'][0][2],c['l'][0][2],c['d'][0][0],c['r'][2][2]=c['l'][0][2],c['d'][0][0],c['r'][2][2],c['u'][0][2]
        c['u'][0][1],c['l'][1][2],c['d'][0][1],c['r'][1][2]=c['l'][1][2],c['d'][0][1],c['r'][1][2],c['u'][0][1]

        c['b'][1][2],c['b'][2][1],c['b'][1][0],c['b'][0][1]=c['b'][0][1],c['b'][1][2],c['b'][2][1],c['b'][1][0]
        c['b'][0][2],c['b'][2][2],c['b'][2][0],c['b'][0][0]=c['b'][0][0],c['b'][0][2],c['b'][2][2],c['b'][2][0]
    elif dir==0:
        
        c['l'][2][2],c['d'][0][2],c['r'][0][2],c['u'][0][0]=c['u'][0][0],c['l'][2][2],c['d'][0][2],c['r'][0][2]
        c['l'][0][2],c['d'][0][0],c['r'][2][2],c['u'][0][2]=c['u'][0][2],c['l'][0][2],c['d'][0][0],c['r'][2][2]
        c['l'][1][2],c['d'][0][1],c['r'][1][2],c['u'][0][1]=c['u'][0][1],c['l'][1][2],c['d'][0][1],c['r'][1][2]
        
        c['b'][0][1],c['b'][1][2],c['b'][2][1],c['b'][1][0]=c['b'][1][2],c['b'][2][1],c['b'][1][0],c['b'][0][1]
        c['b'][0][0],c['b'][0][2],c['b'][2][2],c['b'][2][0]=c['b'][0][2],c['b'][2][2],c['b'][2][0],c['b'][0][0]        

        
    else:
        return "Fatal Error"
    return c
def scramble():
    moves = []
    while len(moves) != 20:
        moves.append(random.randrange(1, 13))
    for move in moves:
        if move == 1:
            u(dir=0)
        elif move == 2:
            u(dir=1)
        elif move == 3:
            d(dir=0)
        elif move == 4:
            d(dir=1)
        elif move == 5:
            r(dir=0)
        elif move == 6:
            r(dir=1)
        elif move == 7:
            l(dir=0)
        elif move == 8:
            l(dir=1)
        elif move == 9:
            f(dir=0)
        elif move == 10:
            f(dir=1)
        elif move == 11:
            b(dir=0)
        elif move == 12:
            b(dir=1)
    return moves
def plane_copy(plane):
    new_plane = []
    for rw in plane:
        new_plane.append(list(rw))
    return new_plane
def plane_print(plane):
    system('cls')
    printed_plane = []
    for rw in plane_copy(plane):
        printed_row = ''.join(rw)
        printed_plane.append(printed_row)
    for rw in printed_plane[::-1]:
        print(rw,flush=True)

def draw_segment(p1, p2, plane,sym='#'):
    x0 = round(p1[0]*w_msht+w//2)
    y0 = round(p1[1]*h_msht+h//2)
    x1 = round(p2[0]*w_msht+w//2)
    y1 = round(p2[1]*h_msht+h//2)

    dx = abs(x1 - x0)
    dy = abs(y1 - y0)
    sx = 1 if x0 < x1 else -1
    sy = 1 if y0 < y1 else -1
    err = dx - dy

    while True:
        if 0 <= x0 < w and 0 <= y0 < h:
            plane[y0][x0] = sym
        if x0 == x1 and y0 == y1:
            break
        e2 = 2 * err
        if e2 > -dy:
            err -= dy
            x0 += sx
        if e2 < dx:
            err += dx
            y0 += sy

    return plane
def draw_polygon(points,pol,plane):
    polygon = pol[-1]
    color = colors[cubes_colors[pol[0]][pol[1][0]][pol[1][1]]]
    segments = []
    for i in range(len(polygon)):
        segment = [points[polygon[i % len(polygon)]],points[polygon[(i+1) % len(polygon)]]]
        segments.append(segment)
    a=segments[0][0]
    b=segments[1][0]
    c=segments[2][0]
    vec1 = [b[0]-a[0],b[1]-a[1],b[2]-a[2]]
    vec2 = [c[0]-b[0],c[1]-b[1],c[2]-b[2]]
    vec_prod = [vec1[1]*vec2[2]-vec1[2]*vec2[1],vec1[2]*vec2[0]-vec1[0]*vec2[2],vec1[0]*vec2[1]-vec1[1]*vec2[0]]
    if vec_prod[2] > 0:
        lamp = [-1,-1,1]
        scalar_prod = lamp[0]*vec_prod[0]+lamp[1]*vec_prod[1]+lamp[2]*vec_prod[2]
        lighting_cos = scalar_prod/((lamp[0]**2+lamp[1]**2+lamp[2]**2)**0.5*(vec_prod[0]**2+vec_prod[1]**2+vec_prod[2]**2)**0.5)
        
        if lighting_cos>0.8:
            symb = color+pol[0]+'\033[0m'
        elif lighting_cos>0.6:
            symb=color+pol[0]+'\033[0m'
        elif lighting_cos>0.4:
            symb=color+pol[0]+'\033[0m'
        elif lighting_cos>0.2:
            symb=color+pol[0]+'\033[0m'
        elif lighting_cos>0:
            symb=color+pol[0]+'\033[0m'
        else:
            symb=color+pol[0].upper()+'\033[0m'

        #начало закраски полигона
        # первая покраска
        x1,x2,x3=points[polygon[0]][0],points[polygon[1]][0],points[polygon[2]][0]
        y1,y2,y3=points[polygon[0]][1],points[polygon[1]][1],points[polygon[2]][1]
        vecAB=[x2-x1,y2-y1]
        AB_points=[]
        vecAB_mod=(vecAB[0]**2+vecAB[1]**2)**0.5
        vecAB_step = [vecAB[0]/(vecAB_mod*w_msht),vecAB[1]/(vecAB_mod*h_msht)]
        vecAB_step_mod = (vecAB_step[0]**2+vecAB_step[1]**2)**0.5
        rng = vecAB_mod/vecAB_step_mod
        i=0
        while i<rng:
            if  len(AB_points) == 0:
                point=[x1+vecAB_step[0],y1+vecAB_step[1]]
            else:
                point=[AB_points[-1][0]+vecAB_step[0],AB_points[-1][1]+vecAB_step[1]]
            AB_points.append(point)
            i+=1
        for p in AB_points:
            plane=draw_segment([x3,y3],p,plane,symb)

        # вторая покраска
        x2,x3,x1=points[polygon[0]][0],points[polygon[1]][0],points[polygon[2]][0]
        y2,y3,y1=points[polygon[0]][1],points[polygon[1]][1],points[polygon[2]][1]
        vecAB=[x2-x1,y2-y1]
        AB_points=[]
        vecAB_mod=(vecAB[0]**2+vecAB[1]**2)**0.5
        vecAB_step = [vecAB[0]/(vecAB_mod*w_msht),vecAB[1]/(vecAB_mod*h_msht)]
        vecAB_step_mod = (vecAB_step[0]**2+vecAB_step[1]**2)**0.5
        rng = vecAB_mod/vecAB_step_mod
        i=0
        while i<rng:
            if  len(AB_points) == 0:
                point=[x1+vecAB_step[0],y1+vecAB_step[1]]
            else:
                point=[AB_points[-1][0]+vecAB_step[0],AB_points[-1][1]+vecAB_step[1]]
            AB_points.append(point)
            i+=1
        for p in AB_points:
            plane=draw_segment([x3,y3],p,plane,symb)

        # третья покраска
        x3,x1,x2=points[polygon[0]][0],points[polygon[1]][0],points[polygon[2]][0]
        y3,y1,y2=points[polygon[0]][1],points[polygon[1]][1],points[polygon[2]][1]
        vecAB=[x2-x1,y2-y1]
        AB_points=[]
        vecAB_mod=(vecAB[0]**2+vecAB[1]**2)**0.5
        vecAB_step = [vecAB[0]/(vecAB_mod*w_msht),vecAB[1]/(vecAB_mod*h_msht)]
        vecAB_step_mod = (vecAB_step[0]**2+vecAB_step[1]**2)**0.5
        rng = vecAB_mod/vecAB_step_mod
        i=0
        while i<rng:
            if  len(AB_points) == 0:
                point=[x1+vecAB_step[0],y1+vecAB_step[1]]
            else:
                point=[AB_points[-1][0]+vecAB_step[0],AB_points[-1][1]+vecAB_step[1]]
            AB_points.append(point)
            i+=1
        for p in AB_points:
            plane=draw_segment([x3,y3],p,plane,symb)
        #конец закраски полигона
        for seg in segments:
            plane = draw_segment(seg[0],seg[1],plane,' ')
        
    return plane
def turn_on_plane(p,plane_coord,clockwise=True):
    if clockwise: i=1
    else: i=-1
    if plane_coord == 'xy':
        pp0=cosinus*p[0]-i*sinus*p[1]
        pp1=i*sinus*p[0]+cosinus*p[1]
        p[0]=pp0
        p[1]=pp1
    elif plane_coord == 'xz':
        pp0=cosinus*p[0]-i*sinus*p[2]
        pp2=i*sinus*p[0]+cosinus*p[2]
        p[0]=pp0
        p[2]=pp2
    elif plane_coord == 'yz':
        pp1=cosinus*p[1]-i*sinus*p[2]
        pp2=i*sinus*p[1]+cosinus*p[2]
        p[1]=pp1
        p[2]=pp2



drawn_plane = plane_copy(plane)
while True:
    cube= [
    [-1.5,-1.5,-1.5],  #  1
    [-1.5,1.5,-1.5],   #  2
    [1.5,-1.5,-1.5],   #  3
    [1.5,1.5,-1.5],    #  4
    [-0.5,-0.5,-1.5],  #  5
    [-0.5,0.5,-1.5],   #  6
    [0.5,-0.5,-1.5],   #  7
    [0.5,0.5,-1.5],    #  8
    [-0.5,-1.5,-1.5],  #  9
    [-0.5,1.5,-1.5],   #  10
    [0.5,-1.5,-1.5],   #  11
    [0.5,1.5,-1.5],    #  12
    [-1.5,-0.5,-1.5],  #  13
    [-1.5,0.5,-1.5],   #  14
    [1.5,-0.5,-1.5],   #  15
    [1.5,0.5,-1.5],    #  16
    [-1.5,-1.5,1.5],   #  17
    [-1.5,1.5,1.5],    #  18
    [1.5,-1.5,1.5],    #  19
    [1.5,1.5,1.5],     #  20
    [-0.5,-0.5,1.5],   #  21
    [-0.5,0.5,1.5],    #  22
    [0.5,-0.5,1.5],    #  23
    [0.5,0.5,1.5],     #  24
    [-0.5,-1.5,1.5],   #  25
    [-0.5,1.5,1.5],    #  26
    [0.5,-1.5,1.5],    #  27
    [0.5,1.5,1.5],     #  28
    [-1.5,-0.5,1.5],   #  29
    [-1.5,0.5,1.5],    #  30
    [1.5,-0.5,1.5],    #  31
    [1.5,0.5,1.5],     #  32
    [-0.5,-1.5,0.5],   #  33
    [-0.5,1.5,0.5],    #  34
    [0.5,-1.5,0.5],    #  35
    [0.5,1.5,0.5],     #  36
    [-1.5,-0.5,0.5],   #  37
    [-1.5,0.5,0.5],    #  38
    [1.5,-0.5,0.5],    #  39
    [1.5,0.5,0.5],     #  40
    [-1.5,-1.5,0.5],   #  41
    [-1.5,1.5,0.5],    #  42
    [1.5,-1.5,0.5],    #  43
    [1.5,1.5,0.5],     #  44
    [-0.5,-1.5,-0.5],  #  45
    [-0.5,1.5,-0.5],   #  46
    [0.5,-1.5,-0.5],   #  47
    [0.5,1.5,-0.5],    #  48
    [-1.5,-0.5,-0.5],  #  49
    [-1.5,0.5,-0.5],   #  50
    [1.5,-0.5,-0.5],   #  51
    [1.5,0.5,-0.5],    #  52
    [-1.5,-1.5,-0.5],  #  53
    [-1.5,1.5,-0.5],   #  54
    [1.5,-1.5,-0.5],   #  55
    [1.5,1.5,-0.5]     #  56
    ]
    cube_polygons = [
    #RIGHT
    ['r',[0,0],[16-1,52-1,56-1]], # 1
    ['r',[0,0],[16-1,56-1,4-1]],

    ['r',[0,1],[52-1,40-1,44-1]], # 2
    ['r',[0,1],[52-1,44-1,56-1]],   

    ['r',[0,2],[40-1,32-1,20-1]], # 3
    ['r',[0,2],[40-1,20-1,44-1]],

    ['r',[1,0],[15-1,51-1,52-1]], # 4
    ['r',[1,0],[15-1,52-1,16-1]],

    ['r',[1,1],[51-1,39-1,40-1]], # 5
    ['r',[1,1],[51-1,40-1,52-1]],   

    ['r',[1,2],[39-1,31-1,32-1]], # 6
    ['r',[1,2],[39-1,32-1,40-1]],  

    ['r',[2,0],[3-1,55-1,51-1]],  # 7
    ['r',[2,0],[3-1,51-1,15-1]],   

    ['r',[2,1],[55-1,43-1,39-1]], # 8
    ['r',[2,1],[55-1,39-1,51-1]],

    ['r',[2,2],[43-1,19-1,31-1]], # 9
    ['r',[2,2],[43-1,31-1,39-1]],

    #UP
    ['u',[0,0],[34-1,26-1,18-1]],# 1
    ['u',[0,0],[34-1,18-1,42-1]],

    ['u',[0,1],[36-1,28-1,26-1]], # 2
    ['u',[0,1],[36-1,26-1,34-1]],

    ['u',[0,2],[44-1,20-1,28-1]], # 3 
    ['u',[0,2],[44-1,28-1,36-1]],

    ['u',[1,0],[46-1,34-1,42-1]], # 4
    ['u',[1,0],[46-1,42-1,54-1]],

    ['u',[1,1],[48-1,36-1,34-1]], # 5
    ['u',[1,1],[48-1,34-1,46-1]],
    
    ['u',[1,2],[56-1,44-1,36-1]], # 6
    ['u',[1,2],[56-1,36-1,48-1]],

    ['u',[2,0],[10-1,46-1,54-1]], # 7
    ['u',[2,0],[10-1,54-1,2-1]],

    ['u',[2,1],[12-1,48-1,46-1]], # 8
    ['u',[2,1],[12-1,46-1,10-1]],
    
    ['u',[2,2],[4-1,56-1,48-1]],  # 9
    ['u',[2,2],[4-1,48-1,12-1]],

    #LEFT
    ['l',[0,0],[2-1,54-1,50-1]], # 1
    ['l',[0,0],[2-1,50-1,14-1]],

    ['l',[0,1],[54-1,42-1,38-1]], # 2
    ['l',[0,1],[54-1,38-1,50-1]],

    ['l',[0,2],[42-1,18-1,30-1]], # 3
    ['l',[0,2],[42-1,30-1,38-1]],

    ['l',[1,0],[14-1,50-1,49-1]], # 4
    ['l',[1,0],[14-1,49-1,13-1]],

    ['l',[1,1],[50-1,38-1,37-1]], # 5
    ['l',[1,1],[50-1,37-1,49-1]],   

    ['l',[1,2],[38-1,30-1,29-1]], # 6
    ['l',[1,2],[38-1,29-1,37-1]],

    ['l',[2,0],[13-1,49-1,53-1]], # 7
    ['l',[2,0],[13-1,53-1,1-1]],

    ['l',[2,1],[49-1,37-1,41-1]], # 8
    ['l',[2,1],[49-1,41-1,53-1]], 

    ['l',[2,2],[37-1,29-1,17-1]], # 9
    ['l',[2,2],[37-1,17-1,41-1]],

    #DOWN
    ['d',[0,0],[41-1,17-1,25-1]], # 1
    ['d',[0,0],[41-1,25-1,33-1]],

    ['d',[0,1],[33-1,25-1,27-1]], # 2
    ['d',[0,1],[33-1,27-1,35-1]],

    ['d',[0,2],[35-1,27-1,19-1]], # 3
    ['d',[0,2],[35-1,19-1,43-1]],
    #
    ['d',[1,0],[53-1,41-1,33-1]], # 4
    ['d',[1,0],[53-1,33-1,45-1]],

    ['d',[1,1],[45-1,33-1,35-1]], # 5
    ['d',[1,1],[45-1,35-1,47-1]],

    ['d',[1,2],[47-1,35-1,43-1]], # 6
    ['d',[1,2],[47-1,43-1,55-1]],
    #
    ['d',[2,0],[1-1,53-1,45-1]], # 7
    ['d',[2,0],[1-1,45-1,9-1]],

    ['d',[2,1],[9-1,45-1,47-1]], # 8
    ['d',[2,1],[9-1,47-1,11-1]],

    ['d',[2,2],[11-1,47-1,55-1]], # 9
    ['d',[2,2],[11-1,55-1,3-1]],

    #BACK
    ['b',[0,0],[22-1,30-1,18-1]], # 1
    ['b',[0,0],[22-1,18-1,26-1]],

    ['b',[0,1],[24-1,22-1,26-1]], # 2
    ['b',[0,1],[24-1,26-1,28-1]],

    ['b',[0,2],[32-1,24-1,28-1]], # 3
    ['b',[0,2],[32-1,28-1,20-1]],  

    ['b',[1,0],[21-1,29-1,30-1]], # 4
    ['b',[1,0],[21-1,30-1,22-1]],  

    ['b',[1,1],[23-1,21-1,22-1]], # 5
    ['b',[1,1],[23-1,22-1,24-1]],

    ['b',[1,2],[31-1,23-1,24-1]], # 6
    ['b',[1,2],[31-1,24-1,32-1]],
               
    ['b',[2,0],[25-1,17-1,29-1]], # 7
    ['b',[2,0],[25-1,29-1,21-1]],

    ['b',[2,1],[27-1,25-1,21-1]], # 8
    ['b',[2,1],[27-1,21-1,23-1]],

    ['b',[2,2],[19-1,27-1,23-1]], # 9
    ['b',[2,2],[19-1,23-1,31-1]],

    #FRONT

    ['f',[0,0],[14-1,6-1,10-1]], # 1
    ['f',[0,0],[14-1,10-1,2-1]],  

    ['f',[0,1],[6-1,8-1,12-1]], # 2
    ['f',[0,1],[6-1,12-1,10-1]],

    ['f',[0,2],[8-1,16-1,4-1]], # 3
    ['f',[0,2],[8-1,4-1,12-1]],

    ['f',[1,0],[13-1,5-1,6-1]], # 4
    ['f',[1,0],[13-1,6-1,14-1]], 

    ['f',[1,1],[5-1,7-1,8-1]], # 5 
    ['f',[1,1],[5-1,8-1,6-1]],  

    ['f',[1,2],[7-1,15-1,16-1]], # 6
    ['f',[1,2],[7-1,16-1,8-1]], 

    ['f',[2,0],[1-1,9-1,5-1]], # 7
    ['f',[2,0],[1-1,5-1,13-1]],

    ['f',[2,1],[9-1,11-1,7-1]], # 8
    ['f',[2,1],[9-1,7-1,5-1]],  

    ['f',[2,2],[11-1,3-1,15-1]], # 9
    ['f',[2,2],[11-1,15-1,7-1]],
    ]
    for i in range(9):
        for p in cube:
            turn_on_plane(p,'xz',False)  
    for i in range(9):      
        for p in cube:
            turn_on_plane(p,'yz',False)

        #for p in cube:
        #    turn_on_plane('xy')
        pass
    mode=True
    action = True
    while True:
        proected_cube = []
        drawn_plane = plane_copy(plane)
        now = time.time()
        if ms.kbhit():
            action = True
            key = ms.getch()
            if key ==b'*':
                mode = not mode
            elif key==b'/':
                scramble()
            elif key ==b'P':
                system('cls')
                print(instruction2)
                showmanual=True
                while showmanual:
                    if ms.kbhit():
                        key=ms.getch()
                        if key==b'Q':
                            showmanual=False
        
            elif key == b's' and mode:
                for p in cube:
                    turn_on_plane(p,'yz')

            elif key == b'w' and mode:
                for p in cube:
                    turn_on_plane(p,'yz',False)

            elif key == b'd' and mode:
                for p in cube:
                    turn_on_plane(p,'xz')

            elif key == b'a' and mode:
                for p in cube:
                    turn_on_plane(p,'xz',False)

            elif key == b'f' and not mode:
                f()
            elif key == b'u' and not mode:
                u()
            elif key == b'r' and not mode:
                r()
            elif key == b'd' and not mode:
                d()            
            elif key == b'l' and not mode:
                l()
            elif key == b'b' and not mode:
                b()
            elif key == b'F' and not mode:
                f(dir=1)
            elif key == b'U' and not mode:
                u(dir=1)
            elif key == b'R' and not mode:
                r(dir=1)
            elif key == b'D' and not mode:
                d(dir=1)            
            elif key == b'L' and not mode:
                l(dir=1)
            elif key == b'B' and not mode:
                b(dir=1)
        if action:    
            for seg in cube_polygons:
                drawn_plane = draw_polygon(cube,seg,drawn_plane)
            plane_print(drawn_plane)
            print(instruction1,flush=True)
            if mode:
                print(r'''         
                         _                 _____   ____ _______    _______ _____ ____  _   _ 
                        | |               |  __ \ / __ \__   __|/\|__   __|_   _/ __ \| \ | |
    _ __ ___   ___   __ | | ___   ______  | |__) | |  | | | |  /  \  | |    | || |  | |  \| |
    | '_ ` _ \ / _ \ / _` |/ _ \ |______| |  _  /| |  | | | | / /\ \ | |    | || |  | | . ` |
    | | | | | | (_) | (_| |  __/          | | \ \| |__| | | |/ ____ \| |   _| || |__| | |\  |
    |_| |_| |_|\___/ \__,_|\___|          |_|  \_\\____/  |_/_/    \_\_|  |_____\____/|_| \_|
                                                                                            
                                                                                            ''')
            else:
                print(r'''                      
                         _                 __  __  ______      _______ _   _  _____ 
                        | |               |  \/  |/ __ \ \    / /_   _| \ | |/ ____|
    _ __ ___   ___   __ | | ___   ______  | \  / | |  | \ \  / /  | | |  \| | |  __ 
    | '_ ` _ \ / _ \ / _` |/ _ \ |______| | |\/| | |  | |\ \/ /   | | | . ` | | |_ |
    | | | | | | (_) | (_| |  __/          | |  | | |__| | \  /   _| |_| |\  | |__| |
    |_| |_| |_|\___/ \__,_|\___|          |_|  |_|\____/   \/   |_____|_| \_|\_____|
                                                                                    
                                                                                    
    ''')
            if cubes_colors == CUBES_COLORS:
                print('\n\n\n')
                print('\033[92m',r'''  
      ____   __    __   ______     _____       _____    _____       _____     ____     _____       __    __    _____   ______    
     / ___)  ) )  ( (  (_   _ \   / ___/      (_   _)  / ____\     / ____\   / __ \   (_   _)      ) )  ( (   / ___/  (_  __ \   
     / /    ( (    ) )   ) (_) ) ( (__          | |   ( (___      ( (___    / /  \ \    | |       ( (    ) ) ( (__      ) ) \ \  
    ( (      ) )  ( (    \   _/   ) __)         | |    \___ \      \___ \  ( ()  () )   | |        \ \  / /   ) __)    ( (   ) ) 
    ( (     ( (    ) )   /  _ \  ( (            | |        ) )         ) ) ( ()  () )   | |   __    \ \/ /   ( (        ) )  ) ) 
     \ \___  ) \__/ (   _) (_) )  \ \___       _| |__  ___/ /      ___/ /   \ \__/ /  __| |___) )    \  /     \ \___   / /__/ /  
     \____)  \______/  (______/    \____\     /_____( /____/      /____/     \____/   \________/      \/       \____\ (______/   
                                                                                                                                ''')
            action = not action
            time.sleep(1/30)